name: Build foo

on:
  workflow_dispatch:
    inputs:
      first:
        description: first input
        required: true
        type: choice
        default: ALL
        options:
          - ALL
          - a
          - b

      second:
        description: second input
        required: true
        type: choice
        default: ALL
        options:
          - ALL
          - x
          - y

run-name: ${{ format('Building with first={0} and second={1}', inputs.first, inputs.second) }}

jobs:

  do-one-thing:
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: actions/github-script@v6
        id: workflows
        with:
          script: |
            // sleep function
            function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
            }

            var workflows = {};
            const FIRST = (context.payload.inputs.first === 'ALL' ? ['a','b'] : [context.payload.inputs.first]);
            const SECOND = (context.payload.inputs.second === 'ALL' ? ['x','y'] : [context.payload.inputs.second]);

            // launch each workflow
            for (const first of FIRST) {
              for (const second of SECOND) {

                // should match the name in the bar.yml workflow
                const new_name = context.runId.toString() + ': ' + first + '-' + second;

                // mark the time right before launching it
                var ts_start = new Date();
                // truncate to second, as that is the granularity of github event tracking
                ts_start.setMilliseconds(0);
                // shift a few seconds back
                ts_start = new Date(ts_start.getTime() - 10000);

                // dispatch the event
                github.rest.actions.createWorkflowDispatch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  workflow_id: 'bar.yml',
                  ref: context.ref,
                  inputs: {
                      reason: new_name,
                      first: first,
                      second: second,
                  }
                });

                // unfortunately, dispatching an event does not return the run id that was started
                // so we poll the recent runs started, knowing this is not ideal
                let found = false;
                do {
                  // pooling immediately always returns empty, so start by waiting a second
                  await sleep(1000);

                  // fetch the list of runs that match the one dispatched
                  const iterator = github.paginate.iterator(github.rest.actions.listWorkflowRuns, {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    workflow_id: 'bar.yml',
                    actor: 'github-actions[bot]',
                    event: 'workflow_dispatch',
                    created: '>=' + ts_start.toISOString(),
                    });

                  // iterate through each response
                  for await (const { data: runs } of iterator) {
                    for (const run of runs) {
                      // if there are multiple candidates, we might filter further
                      // but when the match was found, use it and break to the next
                      if (run.name === new_name) {
                        workflows[new_name] = run;
                        found = true;
                        break;
                      }
                    }
                    if (found)
                      break;
                  }

                  // if not found, the next search mark the time after launching it and sleeping 1s
                  ts_start = new Date(ts_start.getTime() + 1000);

                } while (!found);
              }
            }
            return workflows;

      - shell: bash
        env:
          result: ${{ steps.workflows.outputs.result }}
        run: |
          (
            echo
            echo "$result" | jq -r '.[]|("# [" + (.name | sub("^[0-9]+: ";"")) + "](" + .html_url + ")")'
            echo
          ) >> "${GITHUB_STEP_SUMMARY}"
